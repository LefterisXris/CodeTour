{
  "id": "aaa85252-f4a1-4e45-9bb1-4dc9593e72c2",
  "tourFile": "highLevelIntroduction.tour",
  "title": "High-Level Introduction",
  "description": "A New Tour",
  "steps": [
    {
      "title": "Tour Intro",
      "description": "# Welcome to General Info Tour!\n\nThe purpose of this tour is to provide a high-level introduction to the Source Code of [CodeTour](https://github.com/LefterisXris/CodeTour) IntelliJ plugin.\n\nAt the end of this Tour, the following knowledge would be acquired:\n\n- Understand the Structure of the plugin\n- Identify plugin important configuration\n- Tours CRUD operations logic\n- Step Navigation and Description Modal\n\n*As always, feel free to request more details, by opening an issue on [Code Tour GitHub](https://github.com/LefterisXris/CodeTour/issues).*",
      "file": "README.md",
      "line": 1
    },
    {
      "title": "README Contents",
      "description": "# README Contents\n\nREADME file is always the best place to look for information related to a project. CodeTours\u0027 README file (markdown) provides info about the following sections:\n\n- CodeTour an IntelliJ Plugin (intro)\n- Thesis Information (Goals, Research, Survey link)\n- Plugin Info (Vision \u0026 Description)\n- Installation instructions",
      "file": "README.md",
      "line": 10
    },
    {
      "title": "Project Properties",
      "description": "# Project Properties\n\nSome of the most important properties of CodeTour are gathered into a file **_gradle.properties_** providing a single point of reference for configuring them.\n\nThe most important properties are:\n\n- pluginName *-- Value is being injected to gradle at build-time and plugin name is defined that way*\n- pluginSinceBuild *-- Backwards compatibility for IntelliJ version (for end-users who will try to install the Plugin)*\n- pluginUntilBuild *-- Upwards compatibility*",
      "file": "gradle.properties",
      "line": 4
    },
    {
      "title": "Properties Access",
      "description": "# Properties Access\n\nCodeTour uses [Gradle Kotlin DSL](https://docs.gradle.org/current/userguide/kotlin_dsl.html) and thus some very useful functions are provided by default.\n\nOne of them is *`Project#findProperty(String key)`* . An alias is provided here so that we can easily access our properties.\n\nExample usage:\n\n- *`version \u003d properties(\"pluginVersion\")` -- pluginVersion is retrieved from* **gradle.properties** *file*",
      "file": "build.gradle.kts",
      "line": 4
    },
    {
      "title": "build.gradle Explanation",
      "description": "# build.gradle Explanation\n\nWithing the Gradle file, the following information can be found:\n\n- Gradle **plugins** that CodeTour uses along with their configuration. e.g. Check the powerful [changelog](https://github.com/JetBrains/gradle-changelog-plugin) plugin and its configuration (separate block)\n\n```gradle\nid(\"org.jetbrains.changelog\") version \"1.3.1\" // the dependency\n...\nchangelog { // configuration\n  version.set(properties(\"pluginVersion\"))\n  groups.set(emptyList())\n}\n```\n\n- Executable gradle **Taks** with some logic\n- **Dependencies** of useful 3rd party libraries like [**Lombok**](https://projectlombok.org/)",
      "file": "build.gradle.kts",
      "line": 6
    },
    {
      "title": "Plugin.xml, the plugin declaration",
      "description": "# Plugin.xml, the plugin declaration\n\nThe plugin configuration file is a **plugin.xml** file located in the *src/main/resources/META-INF* directory. It provides general information about the plugin, its dependencies, extensions, listeners, actions, etc.\n\nMore information is available on [Plugin Configuration File Documentation](https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html?from\u003dIJPluginTemplate)",
      "file": "plugin.xml",
      "line": 2
    },
    {
      "title": "Tours StateManager",
      "description": "# Tours StateManager\n\nStateManager is the class responsible for implementing all the **CRUD** operations for Tours and their Steps.\n\nThe following are implemented here:\n\n- Load Tours from source files\n- Create/Edit/Delete a Tour\n- Create/Edit/Delete a Tour Step\n- Hold info ( **static**) about the active Tour\n- Some Validation methods",
      "file": "StateManager.java",
      "line": 32
    },
    {
      "title": "Tours Tree",
      "description": "# Tours Tree\n\nThe component which renders the Tours along with their Steps in a tree view Tool Window.\n\nBesides the tree and its listeners, a very important section is related to the **MessageBus Listener** which is a messaging implementation so that UI (Tours tree) is always in-sync with user actions.",
      "file": "ToolPaneWindow.java",
      "line": 67
    },
    {
      "title": "Navigation Implementation",
      "description": "# Navigation Implementation\n\nNavigator class that navigates the user to the location that a step indicates.\n\nThe location is identified by the filename and line.\n\nIn future releases, more flexibility will be provided.\n\nAt the end, navigator also triggers the rendering of Step\u0027s description to the editor.",
      "file": "Navigator.java",
      "line": 23
    },
    {
      "title": "Step Description Renderer",
      "description": "# Step Description Renderer\n\nStep Description Renderer is responsible for creating the modal containing the Step\u0027s description\n\nStep Renderer includes:\n- a custom Dialog wrapper implementation\n- markdown/html formatter to display the content in a readable form\n- documentation-like sections (e.g. the source file)\n- buttons for navigation to Previous/Next step",
      "file": "StepRenderer.java",
      "line": 28
    },
    {
      "title": "Step Generator",
      "description": "# Step Generator\n\nThe Step Generator, registers a listener action on Editor\u0027s gutter menu (right click), giving that way the ability to create a Step as simply as creating a Breakpoint.\n\nExtra:\n- clicking on a step through it\u0027s Gutter Icon, its description will popup (Step Renderer) automatically",
      "file": "TourStepGeneratorAction.java",
      "line": 27
    },
    {
      "title": "CI/CD: Build",
      "description": "# CI/CD Build\n\nGitHub Actions Workflow created for testing and preparing the plugin release in following steps:\n\n- validate Gradle Wrapper,\n- run \u0027test\u0027 and \u0027verifyPlugin\u0027 tasks,\n- run Qodana inspections,\n- run \u0027buildPlugin\u0027 task and prepare artifact for the further tests,\n- run \u0027runPluginVerifier\u0027 task,\n- create a draft release.\n\nWorkflow is triggered on **push** and **pull\\_request** events.\n\nGitHub Actions reference: [https://help.github.com/en/actions](https://help.github.com/en/actions)",
      "file": "build.yml",
      "line": 15
    },
    {
      "title": "CI/CD: Release",
      "description": "# CI/CD Release\n\n*GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.\nRunning the publishPlugin task requires the PUBLISH\\_TOKEN secret provided.*\n\nWorflow:\n- Reads the Changelog to prepare the Release notes\n- Uploads the Release and Publishes it to the Marketplace\n- Creates a Pull Request with the patched changelog for the next version",
      "file": "release.yml",
      "line": 4
    }
  ]
}